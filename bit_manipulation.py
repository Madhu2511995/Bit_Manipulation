# -*- coding: utf-8 -*-
"""Bit_Manipulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nhowdJ2c6YP4ZhGKYSqV711nZzB4eT8Z

# **Bit Manipulation**

### **Decimal to Binary**
"""

# TC:0(log2**n)
# SC:0(log2**n)
def decimal_to_binary(n):
  ans=''
  while n!=1:
    rem=n%2
    ans+=str(rem)
    n=n//2
  ans+='1'
  return ans[::-1]
decimal_to_binary(9)

# TC:0(log2**n)
# SC:0(log2**n)
def decimal_to_binary(n):
  ans=''
  while n!=0:
    if n%2==1:
      ans+='1'
    else:
      ans+='0'
    n=n//2
  return ans[::-1]
decimal_to_binary(8)

"""### **Convert Binary to decimal**"""

# TC:0(n)
# SC:0(1)
def binary_to_decimal(b):
  n=len(b)
  pow_of_two=1
  num=0
  for i in range(n-1,-1,-1):
    if b[i]=='1':
      num+=pow_of_two
    pow_of_two=pow_of_two*2
  return num

b='1000'
binary_to_decimal(b)

"""### **Swap Of two number**"""

a=5
b=6
a=a^b
b=a^b
a=a^b
print(a,b)

"""### **Check nth bit is set or not**"""

# Use left shift Operator
# TC:O(1)
# SC:O(1)
a=13
n=2
if a &(1<<n)!=0:
  print(True)
else:
  print(False)

# Use Right shift Operator
# TC:O(1)
# SC:O(1)
a=13
n=2
if 1 &(a>>n)!=0:
  print(True)
else:
  print(False)

"""### **Set the nth bit**"""

# TC:O(1)
# SC:O(1)
a=10
n=2
ans=a | (1<<n)
print(ans)

"""### **Clear the nth bit**"""

# TC:O(1)
# SC:O(1)
a=14
n=2
ans=a & ~(1<<n)
print(ans)

"""### **Toggle the nth bit**
* if nth bit is 1 the

       make nth bit 1 to 0

* if nth bit is 0 the

       make nth bit 0 to 1
"""

# TC:O(1)
# SC:O(1)
a=13
n=2
ans=a ^ (1<<n)
print(ans)

"""### **Remove The last set bit (right most bit)**"""

# TC:O(1)
# SC:O(1)
n=10
print(n & (n-1))

"""### **Check number is power of 2 or not**"""

n=10
if n==0:
  print(False)
if n & (n-1)==0:
  print(True)
else:
  print(False)

"""### **Count the number of set bit of given number**"""

def count_set_bit(n):
  cnt=0
  while n!=0:
    if n%2==1:
      cnt+=1
    n=n//2
  return cnt

n=16
count_set_bit(n)

def count_set_bit(n):
  cnt=0
  while n!=0:
    cnt+=n & 1 # Check number is odd
    n=n>>1 # do same n//2
  return cnt

n=10
count_set_bit(n)

"""### **Divide Two Integers without using Multiplication and Division Operators | Bit Manipulation**"""

# Give Time Limit Exceeded
def divide(dividend: int, divisor: int) -> int:
  sumn=0
  cnt=0
  while sumn+divisor<=dividend:
    cnt+=1
    sumn+=divisor
  return cnt
divide(10,3)

# TC:O(log2**n)**2
# SC:O(1)
def divide(dividend: int, divisor: int) -> int:
  if dividend==divisor:
    return 1
  sign=True
  if dividend>=0 and divisor<0:
    sign=False
  if dividend<0 and divisor>=0:
    sign=False
  ans=0

  n=abs(dividend)
  d=abs(divisor)
  while n>=d:
    cnt=0
    #same as d*2**cnt
    while n>=(d<<cnt+1):
      cnt+=1
    ans+=1<<cnt # same as 2**cnt
    n=n-(d*(1<<cnt))
  if ans>=2**31 and sign==True:
    return 2**31-1
  if ans>=2**31 and sign==False:
    return 2**31
  return  ans if sign is True else -1*ans


divide(-100,3)

"""### **Minimum Bit Flips to Convert Number**"""

# TC:O(31)
#SC:O(1)
start=10
goal=7
ans=start^goal
cnt=0
for i in range(32):
  if ans &(1<<i):
    cnt+=1
print(cnt)

# TC:O(log2(start^goal))
#SC:O(1)
start=10
goal=7
ans=start^goal
cnt=0
while ans!=0:
  if ans%2!=0:
    cnt+=1
  ans=ans//2
print(cnt)

"""### **Single Number-I**"""

# TC:O(nlog(size of dict))+O(size of dict)
#SC:O(size of dict)
num=[4,2,1,2,1,3,3]
d={}
for i in num:
  if i not in d:
    d[i]=1
  else:
    d[i]+=1
for k,v in d.items():
  if v==1:
    print(k)

# TC:O(n)
#SC:O(1)
num=[4,2,1,2,1,3,3]
ans=0
for i in num:
  ans=ans^i
print(ans)

"""### **XOR of Numbers in a Given Range**"""

# TC:O(n)
# SC:O(1)
n=9
ans=0
for i in range(1,n+1):
  ans=ans^i
print(ans)

# Observetion
# TC:O(1)
# SC:O(1)
def fun(n):
  if n%4==1:
    return 1
  elif n%4==2:
    return n+1
  elif n%4==3:
    return 0
  return n
fun(9)

"""### **XOR of Numbers in a Given between Range**"""

# TC:O((k)-(n+1))
# SC:O(1)
k=3
n=9
ans=0
for i in range(k,n+1):
  ans=ans^i
print(ans)

# TC:O(1)
# SC:O(1)
def fun(n):
  if n%4==1:
    return 1
  elif n%4==2:
    return n+1
  elif n%4==3:
    return 0
  return n
k=3
n=9
ans=fun(k-1)^fun(n)
print(ans)

"""### **Single Number III**"""

# TC: O(nlogm)+O(m)
# SC: O(m)
def twoOddNum(Arr):
  # code here
  d={}
  ans=[]
  for i in Arr:
      if i not in d:
          d[i]=1
      else:
          d[i]+=1
  for k,v in d.items():
      if v==1:
          ans.append(k)
  return ans
Arr = [4, 2, 4, 5, 2, 3, 3, 1]
twoOddNum(Arr)

# TC: O(2n)
# SC: O(1)
arr =[4, 2, 4, 5, 2, 3, 3, 1]
ans=0
for i in range(len(arr)):
  ans=ans^arr[i]
rightbit=(ans & ans-1)^ans
b1=0
b2=0
for i in range(len(arr)):
  if arr[i] & rightbit:
    b1=b1^arr[i]
  else:
    b2=b2^arr[i]
print(b1,b2)

"""### **Print all prime factors of a Number**"""

### Print all diviser of any number
# TC:O(N)
# SC:O(number of output)
def div(n):
  ans=[]
  for i in range(1,n+1):
    if n%i==0:
      ans.append(i)
  return ans
div(36)

# TC:O(sqrt(n))
# SC:O(number of output)
import math
def div(n):
  ans=[]
  for i in range(1,int(math.sqrt(n))+1):
    if n%i==0:
      ans.append(i)
      if n//i!=i:
        ans.append(n//i)
  return ans
div(36)

# Check prime
#TC:O(N)
#SC:O(1)
def is_prime(n):
  cnt=0
  for i in range(1,n+1):
    if n%i==0:
      cnt+=1
  if cnt==2:
    return "Prime"
  return "Not Prime"
is_prime(2)

# Check prime
#TC:O(root(n))
#SC:O(1)
import math
def is_prime(n):
  cnt=0
  for i in range(1,int(math.sqrt(n))+1):
    if n==1:
      return False
    if n%i==0:
      cnt+=1
      if n%i !=i:
        cnt+=1
  if cnt==2:
    return True
  return False
is_prime(2)

math.ceil(math.sqrt(4))

#TC:O(root(n)+logn)
#SC:O(number of output)
import math
def prime_fact(n):
  ans=[]
  for i in range(1,math.ceil(math.sqrt(n))+1):
    if n%i==0:
      if is_prime(i):
        ans.append(i)
      if n//i!=i:
        if is_prime(n//i):
          ans.append(n//i)
  return ans
prime_fact(4)

"""### **Sieve of Eratosthenes**"""

def fun(n):
  cnt=0
  for i in range(2,n+1):
    if is_prime(i):
      cnt+=1
  return cnt
fun(99)

def fun(n):
  prime=[1]*(n+1)
  cnt=0
  for i in range(2,n+1):
    if prime[i]==1:
      for j in range(2*i,n+1,i):
        prime[j]=0
  for i in range(2,n):
    if prime[i]==1:
      cnt+=1
  return cnt
fun(6)

"""### **Smallest Prime Factor (SPF) | Prime Factorisation**"""

def fun(n):
  spf=[0]*(10**5+1)
  for i in range(2,10**5+1):
    spf[i]=i
  for i in range(2,10**5+1):
    if spf[i]==i:
      j=i*i
      for j in range(i*i,10**5+1,j+i):
        if spf[j]==j:
          spf[j]=i
  for i in range(2,n):
    num=spf[i]
    while num!=1:
      print(spf[num])
      num=num/spf[num]
fun(10)

